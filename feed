<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0">
	<channel>
		<title>LispCast</title>
		<link>http://www.lispcast.com/</link>
		<description>A blog about the simple joys of functional programming.</description>
		<language>en</language>


                <item>
                  <title>Recommendations for Next-Level Clojure</title>
                  <guid isPermalink="false">http://www.lispcast.com/clojure-the-next-level</guid>
                  <link>http://www.lispcast.com/clojure-the-next-level</link>
                  <pubDate>Sun 24 Jan 2016 03:29:46 PM CST</pubDate>
                  <description>
                    There are many classics of functional programming that can help you take your thinking to the next level. My recommendations are for making you think in a new way.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clojure-the-next-level"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Global Mutable State</title>
                  <guid isPermalink="false">http://www.lispcast.com/global-mutable-state</guid>
                  <link>http://www.lispcast.com/global-mutable-state</link>
                  <pubDate>Wed 06 Jan 2016 05:13:43 PM CST</pubDate>
                  <description>
                    Global mutable state is one of the biggest drivers of complexity in software systems. We tackle a definition and how to reduce our reliance on it.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/global-mutable-state"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>How to Switch from the Imperative Mindset</title>
                  <guid isPermalink="false">http://www.lispcast.com/imperative-mindset</guid>
                  <link>http://www.lispcast.com/imperative-mindset</link>
                  <pubDate>Sat 12 Dec 2015 06:04:21 AM CST</pubDate>
                  <description>
                    Functional programming, from one perspective, is just a collection of habits that affect our programming. I've identified the cues for those habits and a routine for replacing imperative code with functional code.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/imperative-mindset"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Clojure + Ruby</title>
                  <guid isPermalink="false">http://www.lispcast.com/clojure-ruby-videos</guid>
                  <link>http://www.lispcast.com/clojure-ruby-videos</link>
                  <pubDate>Wed 03 Dec 2015 10:51:00 AM CST</pubDate>
                  <description>
                    If you're a Rubyist and you've heard some buzz about Clojure, these videos and links will be just for you. Rubyists teaching Clojure, Clojurists introducing Clojure to Ruby programmers, and Rubyists pontificating on Clojure.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clojure-ruby-videos"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>2 Features of Clojure Editors Professionals Won't Do Without</title>
                  <guid isPermalink="false">http://www.lispcast.com/clojure-editors</guid>
                  <link>http://www.lispcast.com/clojure-editors</link>
                  <pubDate>Sat 28 Nov 2015 12:00:45 AM CST</pubDate>
                  <description>
                    Professional Clojure programmers rely on certain features of their editors to help them program. When choosing an editor, it's important to pick one that has these two important features: REPL integration and structural editing.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clojure-editors"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>The 100 Most Used Clojure Expressions</title>
                  <guid isPermalink="false">http://www.lispcast.com/100-most-used-clojure-expressions</guid>
                  <link>http://www.lispcast.com/100-most-used-clojure-expressions</link>
                  <pubDate>Sat 14 Nov 2015 05:43:51 AM CST</pubDate>
                  <description>
                    Would you like to optimize your learning of Clojure? Would you like to focus on learning only the most useful parts of the language first? Take this lesson from second language learning: learn the expressions in order of frequency of use.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/100-most-used-clojure-expressions"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>SOLID Principles in Clojure</title>
                  <guid isPermalink="false">http://www.lispcast.com/solid-principles-in-clojure</guid>
                  <link>http://www.lispcast.com/solid-principles-in-clojure</link>
                  <pubDate>Sun 09 Nov 2015 3:22:01 PM CST</pubDate>
                  <description>
                    The SOLID principles are guidelines for writing good Object-Oriented code. It turns out that these principles are followed and embodied in Clojure.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/solid-principles-in-clojure"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Where to find time to learn and practice Clojure</title>
                  <guid isPermalink="false">http://www.lispcast.com/where-to-find-time-to-learn-clojure</guid>
                  <link>http://www.lispcast.com/where-to-find-time-to-learn-clojure</link>
                  <pubDate>Wed 04 Nov 2015 02:44:41 PM CST</pubDate>
                  <description>
                    Learning any new language is a challenge, and Clojure is no different. Finding the time to learn and practice is a real challenge, so we need to make the most of what time we have. These tips will help you immerse yourself in Clojure.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/where-to-find-time-to-learn-clojure"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Parens vs Brackets in Clojure</title>
                  <guid isPermalink="false">http://www.lispcast.com/parens-vs-brackets-in-clojure</guid>
                  <link>http://www.lispcast.com/parens-vs-brackets-in-clojure</link>
                  <pubDate>Mon 02 Nov 2015 10:05:06 PM CST</pubDate>
                  <description>
                    Clojure uses both parentheses and square brackets as part of its syntax. It might at first appear to be arbitrary, but it's actually systematic. What's more, it reveals one of the coolest things about Clojure: expressions define how they interpret their arguments.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/parens-vs-brackets-in-clojure"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>clj-refactor cheatsheets</title>
                  <guid isPermalink="false">http://www.lispcast.com/clj-refactor</guid>
                  <link>http://www.lispcast.com/clj-refactor</link>
                  <pubDate>Wed 28 Oct 2015 05:31:10 PM CDT</pubDate>
                  <description>
                    I've made some cheatsheets to help me learn clj-refactor, some Emacs software that helps you make systematic changes to code.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clj-refactor"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>

	</channel>
</rss>
