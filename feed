<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0">
	<channel>
		<title>LispCast</title>
		<link>http://www.lispcast.com/</link>
		<description>A blog about the simple joys of functional programming.</description>
		<language>en</language>


                <item>
                  <title>When in doubt, refactor at the bottom</title>
                  <guid isPermalink="false">http://www.lispcast.com/refactor-bottom</guid>
                  <link>http://www.lispcast.com/refactor-bottom</link>
                  <pubDate>Mon 26 Jun 2017 08:00:38 AM CDT</pubDate>
                  <description>
                    We explore when it is safe to extract out an abstraction and when you need to go deeper and rebuild it from scratch.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/refactor-bottom"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>What is an abstraction?</title>
                  <guid isPermalink="false">http://www.lispcast.com/what-is-abstraction</guid>
                  <link>http://www.lispcast.com/what-is-abstraction</link>
                  <pubDate>Sun 25 Jun 2017 16:50:44 AM CDT</pubDate>
                  <description>
                    We explore some of the background behind the meaning of the word abstraction and why we do it.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/what-is-abstraction"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>What should a Clojure framework look like?</title>
                  <guid isPermalink="false">http://www.lispcast.com/clojure-web-framework</guid>
                  <link>http://www.lispcast.com/clojure-web-framework</link>
                  <pubDate>Wed 21 Jun 2017 09:30:38 AM CDT</pubDate>
                  <description>
                    After exploring why frameworks and why not frameworks, I dive into the design priorities I think a web framework should have.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clojure-web-framework"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>The arguments against web frameworks</title>
                  <guid isPermalink="false">http://www.lispcast.com/arguments-against-frameworks</guid>
                  <link>http://www.lispcast.com/arguments-against-frameworks</link>
                  <pubDate>Tue 20 Jun 2017 06:30:36 AM CDT</pubDate>
                  <description>
                    We explore three arguments against frameworks, address them, then turn them into challenges to be overcome.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/arguments-against-frameworks"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Why do we use Web Frameworks?</title>
                  <guid isPermalink="false">http://www.lispcast.com/why-web-frameworks</guid>
                  <link>http://www.lispcast.com/why-web-frameworks</link>
                  <pubDate>Mon 19 Jun 2017 08:15:33 AM CDT</pubDate>
                  <description>
                    While contemplating a Clojure web framework, I explore the reasons we use web frameworks in general. I conclude that the framework should support a learnable development process.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/why-web-frameworks"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Should Cognitect do More for Clojure?</title>
                  <guid isPermalink="false">http://www.lispcast.com/cognitect-clojure</guid>
                  <link>http://www.lispcast.com/cognitect-clojure</link>
                  <pubDate>Thu 25 May 2017 07:10:48 AM CDT</pubDate>
                  <description>
                    Poor open-source development practices, neglect for the beginner experience, and lack of communication have come up as complaints against how Cognitect stewards Clojure. I address the complaints with a plea that we do more as a community.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/cognitect-clojure"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Defn Podcast Transcript</title>
                  <guid isPermalink="false">http://www.lispcast.com/defn-podcast-transcript</guid>
                  <link>http://www.lispcast.com/defn-podcast-transcript</link>
                  <pubDate>Thu 11 May 2017 01:24:14 PM CDT</pubDate>
                  <description>
                    I was on the Defn Podcast. We talked about Clojure, testing, and PHP :) Here is a transcript.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/defn-podcast-transcript"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>The Bootstrapping Mindset</title>
                  <guid isPermalink="false">http://www.lispcast.com/bootstrapping-mindset</guid>
                  <link>http://www.lispcast.com/bootstrapping-mindset</link>
                  <pubDate>Tue 16 Mar 2017 06:48:01 AM CDT</pubDate>
                  <description>
                    One of the great things about very robust and powerful abstractions is that they can give you tremendous leverage. The leverage can be so great that you can build something much greater than the sum of its parts. However, I worry that the web is an end to this kind of abstraction. I'd like to explore why that is and what we can do about it.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/bootstrapping-mindset"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>The Idea of Lisp</title>
                  <guid isPermalink="false">http://www.lispcast.com/idea-of-lisp</guid>
                  <link>http://www.lispcast.com/idea-of-lisp</link>
                  <pubDate>Tue 13 Dec 2016 06:41:42 AM CDT</pubDate>
                  <description>
                    How a programming language can be an idea.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/idea-of-lisp"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Building Composable Abstractions Rehearsal 3</title>
                  <guid isPermalink="false">http://www.lispcast.com/building-composable-abstractions-3</guid>
                  <link>http://www.lispcast.com/building-composable-abstractions-3</link>
                  <pubDate>Sun 13 Nov 2016 03:36:36 PM CST</pubDate>
                  <description>
                    My third rehearsal for my upcoming Clojure/conj talk.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/building-composable-abstractions-3"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>

	</channel>
</rss>
