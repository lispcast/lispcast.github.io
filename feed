<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0">
	<channel>
		<title>LispCast</title>
		<link>http://www.lispcast.com/</link>
		<description>A blog about the simple joys of functional programming.</description>
		<language>en</language>


                <item>
                  <title>Clojure vs. The Static Typing World</title>
                  <guid isPermalink="false">http://www.lispcast.com/clojure-and-types</guid>
                  <link>http://www.lispcast.com/clojure-and-types</link>
                  <pubDate>Thu 26 Oct 2017 04:45:17 PM CDT</pubDate>
                  <description>
                    Rich Hickey explained the design choices behind Clojure and made many statements about static typing along the way. Share an interesting perspective and some stories from my time as a Haskell programmer. I conclude with a design challenge for the statically typed world.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clojure-and-types"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Programming Paradigms and the Procedural Paradox</title>
                  <guid isPermalink="false">http://www.lispcast.com/procedural-paradox</guid>
                  <link>http://www.lispcast.com/procedural-paradox</link>
                  <pubDate>Wed 30 Aug 2017 14:07:44 AM CDT</pubDate>
                  <description>
                    I break down two perspectives (their features and their methodologies) for the three most common paradigms. I also explore why paradigms are so easy to argue about, and what we can do about it.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/procedural-paradox"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Can I do FP in my language?</title>
                  <guid isPermalink="false">http://www.lispcast.com/fp-in-my-language</guid>
                  <link>http://www.lispcast.com/fp-in-my-language</link>
                  <pubDate>Tue 02 Aug 2017 02:24:20 PM CDT</pubDate>
                  <description>
                    We address the question directly, but then look deeper to the beliefs behind the question.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/fp-in-my-language"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>When in doubt, refactor at the bottom</title>
                  <guid isPermalink="false">http://www.lispcast.com/refactor-bottom</guid>
                  <link>http://www.lispcast.com/refactor-bottom</link>
                  <pubDate>Mon 26 Jun 2017 08:00:38 AM CDT</pubDate>
                  <description>
                    We explore when it is safe to extract out an abstraction and when you need to go deeper and rebuild it from scratch.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/refactor-bottom"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>What is an abstraction?</title>
                  <guid isPermalink="false">http://www.lispcast.com/what-is-abstraction</guid>
                  <link>http://www.lispcast.com/what-is-abstraction</link>
                  <pubDate>Sun 25 Jun 2017 16:50:44 AM CDT</pubDate>
                  <description>
                    We explore some of the background behind the meaning of the word abstraction and why we do it.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/what-is-abstraction"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>What should a Clojure framework look like?</title>
                  <guid isPermalink="false">http://www.lispcast.com/clojure-web-framework</guid>
                  <link>http://www.lispcast.com/clojure-web-framework</link>
                  <pubDate>Wed 21 Jun 2017 09:30:38 AM CDT</pubDate>
                  <description>
                    After exploring why frameworks and why not frameworks, I dive into the design priorities I think a web framework should have.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clojure-web-framework"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>The arguments against web frameworks</title>
                  <guid isPermalink="false">http://www.lispcast.com/arguments-against-frameworks</guid>
                  <link>http://www.lispcast.com/arguments-against-frameworks</link>
                  <pubDate>Tue 20 Jun 2017 06:30:36 AM CDT</pubDate>
                  <description>
                    We explore three arguments against frameworks, address them, then turn them into challenges to be overcome.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/arguments-against-frameworks"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Why do we use Web Frameworks?</title>
                  <guid isPermalink="false">http://www.lispcast.com/why-web-frameworks</guid>
                  <link>http://www.lispcast.com/why-web-frameworks</link>
                  <pubDate>Mon 19 Jun 2017 08:15:33 AM CDT</pubDate>
                  <description>
                    While contemplating a Clojure web framework, I explore the reasons we use web frameworks in general. I conclude that the framework should support a learnable development process.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/why-web-frameworks"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Should Cognitect do More for Clojure?</title>
                  <guid isPermalink="false">http://www.lispcast.com/cognitect-clojure</guid>
                  <link>http://www.lispcast.com/cognitect-clojure</link>
                  <pubDate>Thu 25 May 2017 07:10:48 AM CDT</pubDate>
                  <description>
                    Poor open-source development practices, neglect for the beginner experience, and lack of communication have come up as complaints against how Cognitect stewards Clojure. I address the complaints with a plea that we do more as a community.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/cognitect-clojure"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Defn Podcast Transcript</title>
                  <guid isPermalink="false">http://www.lispcast.com/defn-podcast-transcript</guid>
                  <link>http://www.lispcast.com/defn-podcast-transcript</link>
                  <pubDate>Thu 11 May 2017 01:24:14 PM CDT</pubDate>
                  <description>
                    I was on the Defn Podcast. We talked about Clojure, testing, and PHP :) Here is a transcript.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/defn-podcast-transcript"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>

	</channel>
</rss>
