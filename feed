<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0">
	<channel>
		<title>LispCast</title>
		<link>http://www.lispcast.com/</link>
		<description>A blog about the simple joys of functional programming.</description>
		<language>en</language>


                <item>
                  <title>Mastering ClojureScript Routing with Secretary and goog.History</title>
                  <guid isPermalink="false">http://www.lispcast.com/mastering-client-side-routing-with-secretary-and-goog-history</guid>
                  <link>http://www.lispcast.com/mastering-client-side-routing-with-secretary-and-goog-history</link>
                  <pubDate>Wed 24 Jun 2015 11:27:14 PM CDT</pubDate>
                  <description>
                    The Google Closure Library provides a nice interface to the HTML5 History API. Coupling it with Secretary is very easy. But not all browsers support HTML5 History. In this post I'll talk about one way to make sure you have client-side routing in all browsers.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/mastering-client-side-routing-with-secretary-and-goog-history"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>How I made my Clojure database tests 5x faster</title>
                  <guid isPermalink="false">http://www.lispcast.com/clojure-database-test-faster</guid>
                  <link>http://www.lispcast.com/clojure-database-test-faster</link>
                  <pubDate>Wed 17 Jun 2015 05:12:05 PM CDT</pubDate>
                  <description>
                    Setting up and tearing down a test database can be slow. Use a rolled back transaction to quickly reset the database to a known state. You can do that in an `:each` fixture to run each test in isolation.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clojure-database-test-faster"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>TDD Workflow in Clojure using Emacs with CIDER</title>
                  <guid isPermalink="false">http://www.lispcast.com/tdd-workflow-in-clojure-with-emacs-and-cider</guid>
                  <link>http://www.lispcast.com/tdd-workflow-in-clojure-with-emacs-and-cider</link>
                  <pubDate>Mon 08 Jun 2015 10:15:10 PM CDT</pubDate>
                  <description>
                    TDD is about fast feedback. CIDER tightens the feedback loop with quick commands for running tests and a powerful test reporting system.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/tdd-workflow-in-clojure-with-emacs-and-cider"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Lambda Abstraction</title>
                  <guid isPermalink="false">http://www.lispcast.com/lambda-abstraction</guid>
                  <link>http://www.lispcast.com/lambda-abstraction</link>
                  <pubDate>Sun 17 May 2015 11:40:36 PM CDT</pubDate>
                  <description>
                    Lambda abstractions are always leaky, but some are leakier than others. Clojure programmers recommend keeping most of your functions pure and containing the leaks as much as possible.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/lambda-abstraction"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Infinite Application</title>
                  <guid isPermalink="false">http://www.lispcast.com/infinite-application</guid>
                  <link>http://www.lispcast.com/infinite-application</link>
                  <pubDate>Sun 17 May 2015 10:26:44 PM CDT</pubDate>
                  <description>
                    Function application is a key concept in lambda calculus. While it is commonly expressed using parentheses in Clojure, it is also reified into a function which itself can be applied to another function.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/infinite-application"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>But the World is Mutable</title>
                  <guid isPermalink="false">http://www.lispcast.com/the-world-is-mutable</guid>
                  <link>http://www.lispcast.com/the-world-is-mutable</link>
                  <pubDate>Mon 11 May 2015 11:46:58 PM CDT</pubDate>
                  <description>
                    The world may be mutable, but people have been using the notion of immutability to build reliable systems for a long time.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/the-world-is-mutable"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>clojure.test cheatsheet</title>
                  <guid isPermalink="false">http://www.lispcast.com/clojure-test-cheatsheet</guid>
                  <link>http://www.lispcast.com/clojure-test-cheatsheet</link>
                  <pubDate>Sun 03 May 2015 10:59:22 PM CDT</pubDate>
                  <description>
                    I made a clojure.test cheatsheet that you can get for free.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clojure-test-cheatsheet"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Pre-West Interview: Ron Toland</title>
                  <guid isPermalink="false">http://www.lispcast.com/pre-west-interview-ron-toland</guid>
                  <link>http://www.lispcast.com/pre-west-interview-ron-toland</link>
                  <pubDate>Tue 21 Apr 2015 10:10:26 AM CDT</pubDate>
                  <description>
                    Ront Toland will talk about developing large Clojure applications.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/pre-west-interview-ron-toland"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Pre-West Interview: Nathaniel Smith and Ruth Linehan</title>
                  <guid isPermalink="false">http://www.lispcast.com/pre-west-interview-nathaniel-smith-ruth-linehan</guid>
                  <link>http://www.lispcast.com/pre-west-interview-nathaniel-smith-ruth-linehan</link>
                  <pubDate>Tue 21 Apr 2015 10:10:14 AM CDT</pubDate>
                  <description>
                    Nathaniel Smith and Ruth Linehan will talk about developing large applications in Clojure.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/pre-west-interview-nathaniel-smith-ruth-linehan"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Pre-West Interview: Leon Barrett</title>
                  <guid isPermalink="false">http://www.lispcast.com/pre-west-interview-leon-barrett</guid>
                  <link>http://www.lispcast.com/pre-west-interview-leon-barrett</link>
                  <pubDate>Sun 19 Apr 2015 10:46:07 AM CDT</pubDate>
                  <description>
                    Leon Barrett will talk about parallel programming in Clojure.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/pre-west-interview-leon-barrett"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>

	</channel>
</rss>
