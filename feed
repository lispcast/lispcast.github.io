<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0">
	<channel>
		<title>LispCast</title>
		<link>http://www.lispcast.com/</link>
		<description>A blog about the simple joys of functional programming.</description>
		<language>en</language>


                <item>
                  <title>Let's TDD clojure.core/map</title>
                  <guid isPermalink="false">http://www.lispcast.com/tdd-clojure-core-map</guid>
                  <link>http://www.lispcast.com/tdd-clojure-core-map</link>
                  <pubDate>Tue 04 Aug 2015 11:27:58 PM CDT</pubDate>
                  <description>
                    Learning to write map is a good lesson because it has recursion, list building, and higher order functions. It's everything that makes Lisp great.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/tdd-clojure-core-map"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Annotated map</title>
                  <guid isPermalink="false">http://www.lispcast.com/annotated-map</guid>
                  <link>http://www.lispcast.com/annotated-map</link>
                  <pubDate>Wed 29 Jul 2015 09:33:06 PM CDT</pubDate>
                  <description>
                    map is one of the staples of functional programming. It's totally useful and also surprisingly simple. Let's look at some examples and annotated code.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/annotated-map"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Some Annotated clojure.core/reduce Examples</title>
                  <guid isPermalink="false">http://www.lispcast.com/annotated-clojure-core-reduce</guid>
                  <link>http://www.lispcast.com/annotated-clojure-core-reduce</link>
                  <pubDate>Tue 21 Jul 2015 10:40:39 PM CDT</pubDate>
                  <description>
                    reduce is a very useful function. You can use it for many calculations over a collection. Code annotations are useful, as are physical metaphors.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/annotated-clojure-core-reduce"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Reduce Complexity with Variants</title>
                  <guid isPermalink="false">http://www.lispcast.com/reduce-complexity-with-variants</guid>
                  <link>http://www.lispcast.com/reduce-complexity-with-variants</link>
                  <pubDate>Wed 08 Jul 2015 11:09:35 PM EDT</pubDate>
                  <description>
                    The structure of our data should match the relevant structures in the real world. And to ensure that our data is structured well, we should reduce the potential for incorrect structure. Variants provide a great solution for it.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/reduce-complexity-with-variants"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Avoid Naming at All Costs</title>
                  <guid isPermalink="false">http://www.lispcast.com/avoid-naming-at-all-costs</guid>
                  <link>http://www.lispcast.com/avoid-naming-at-all-costs</link>
                  <pubDate>Sun 05 Jul 2015 09:51:29 AM CDT</pubDate>
                  <description>
                    If naming is one of the two hardest things in programming, it follows that every other possible solution (except those few involving cache invalidation) should be attempted before naming something. As a corrolary, bad names are a code smell.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/avoid-naming-at-all-costs"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Mastering ClojureScript Routing with Secretary and goog.History</title>
                  <guid isPermalink="false">http://www.lispcast.com/mastering-client-side-routing-with-secretary-and-goog-history</guid>
                  <link>http://www.lispcast.com/mastering-client-side-routing-with-secretary-and-goog-history</link>
                  <pubDate>Wed 24 Jun 2015 11:27:14 PM CDT</pubDate>
                  <description>
                    The Google Closure Library provides a nice interface to the HTML5 History API. Coupling it with Secretary is very easy. But not all browsers support HTML5 History. In this post I'll talk about one way to make sure you have client-side routing in all browsers.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/mastering-client-side-routing-with-secretary-and-goog-history"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>How I made my Clojure database tests 5x faster</title>
                  <guid isPermalink="false">http://www.lispcast.com/clojure-database-test-faster</guid>
                  <link>http://www.lispcast.com/clojure-database-test-faster</link>
                  <pubDate>Wed 17 Jun 2015 05:12:05 PM CDT</pubDate>
                  <description>
                    Setting up and tearing down a test database can be slow. Use a rolled back transaction to quickly reset the database to a known state. You can do that in an `:each` fixture to run each test in isolation.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clojure-database-test-faster"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>TDD Workflow in Clojure using Emacs with CIDER</title>
                  <guid isPermalink="false">http://www.lispcast.com/tdd-workflow-in-clojure-with-emacs-and-cider</guid>
                  <link>http://www.lispcast.com/tdd-workflow-in-clojure-with-emacs-and-cider</link>
                  <pubDate>Mon 08 Jun 2015 10:15:10 PM CDT</pubDate>
                  <description>
                    TDD is about fast feedback. CIDER tightens the feedback loop with quick commands for running tests and a powerful test reporting system.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/tdd-workflow-in-clojure-with-emacs-and-cider"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Lambda Abstraction</title>
                  <guid isPermalink="false">http://www.lispcast.com/lambda-abstraction</guid>
                  <link>http://www.lispcast.com/lambda-abstraction</link>
                  <pubDate>Sun 17 May 2015 11:40:36 PM CDT</pubDate>
                  <description>
                    Lambda abstractions are always leaky, but some are leakier than others. Clojure programmers recommend keeping most of your functions pure and containing the leaks as much as possible.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/lambda-abstraction"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Infinite Application</title>
                  <guid isPermalink="false">http://www.lispcast.com/infinite-application</guid>
                  <link>http://www.lispcast.com/infinite-application</link>
                  <pubDate>Sun 17 May 2015 10:26:44 PM CDT</pubDate>
                  <description>
                    Function application is a key concept in lambda calculus. While it is commonly expressed using parentheses in Clojure, it is also reified into a function which itself can be applied to another function.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/infinite-application"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>

	</channel>
</rss>
