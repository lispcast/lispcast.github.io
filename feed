<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0">
	<channel>
		<title>LispCast</title>
		<link>http://www.lispcast.com/</link>
		<description>A blog about the simple joys of functional programming.</description>
		<language>en</language>


                <item>
                  <title>What my daughter's blocks teach us about learning</title>
                  <guid isPermalink="false">http://www.lispcast.com/clojure-and-blocks</guid>
                  <link>http://www.lispcast.com/clojure-and-blocks</link>
                  <pubDate>Thu 10 Mar 2016 03:38:14 PM CST</pubDate>
                  <description>
                    My daughter's blocks taught her to match shapes with a lot of fast feedback. Fast feedback is a powerful tool to learn any skill. I analyze how the blocks helped my daughter learn and compare it to learning Clojure.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clojure-and-blocks"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Master one skill at a time</title>
                  <guid isPermalink="false">http://www.lispcast.com/master-one-skill-at-a-time</guid>
                  <link>http://www.lispcast.com/master-one-skill-at-a-time</link>
                  <pubDate>Thu 10 Mar 2016 03:36:58 PM CST</pubDate>
                  <description>
                    Research shows that developing mastery of a large skill is best done by mastering smaller skills that you can achieve 90% accuracy very quickly. LispCast Introduction to Clojure has broken the skills you need down for you.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/master-one-skill-at-a-time"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Practice as soon as possible</title>
                  <guid isPermalink="false">http://www.lispcast.com/start-practicing-soon</guid>
                  <link>http://www.lispcast.com/start-practicing-soon</link>
                  <pubDate>Thu 10 Mar 2016 02:56:26 PM CST</pubDate>
                  <description>
                    Much of the difficulty of learning a new language is caused by knowing more than you are comfortable doing. It's so important to get started practicing real programming as soon as possible.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/start-practicing-soon"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>The Importance of Embodied Metaphors</title>
                  <guid isPermalink="false">http://www.lispcast.com/interactive-baking</guid>
                  <link>http://www.lispcast.com/interactive-baking</link>
                  <pubDate>Fri 04 Mar 2016 08:48:52 PM CST</pubDate>
                  <description>
                    LispCast Introduction to Clojure teaches Clojure with an &quot;interactive bakery simulation&quot;. The reason is that metaphors that you can embody are a great way to learn abstract things like programming.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/interactive-baking"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Why I start teaching Clojure with Imperative Programming</title>
                  <guid isPermalink="false">http://www.lispcast.com/imperative-intro</guid>
                  <link>http://www.lispcast.com/imperative-intro</link>
                  <pubDate>Thu 03 Mar 2016 09:58:50 PM CST</pubDate>
                  <description>
                    LispCast Introduction to Clojure starts with 30 minutes of imperative programming. We write programs for their effects, so imperative is a great place to start.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/imperative-intro"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>deftype vs defrecord</title>
                  <guid isPermalink="false">http://www.lispcast.com/deftype-vs-defrecord</guid>
                  <link>http://www.lispcast.com/deftype-vs-defrecord</link>
                  <pubDate>Thu 03 Mar 2016 06:08:29 PM CST</pubDate>
                  <description>
                    There are two commonly used ways to create new data types in Clojure, deftype and defrecord. They are similar but are intended to be used in two distinct use cases. deftype is for programming constructs and defrecord is for domain constructs.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/deftype-vs-defrecord"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>What are macros?</title>
                  <guid isPermalink="false">http://www.lispcast.com/what-are-macros</guid>
                  <link>http://www.lispcast.com/what-are-macros</link>
                  <pubDate>Thu 03 Mar 2016 05:45:27 PM CST</pubDate>
                  <description>
                    Macros are one of the most talked about features of Lisp. They are a powerful way to extend the language without modifying the compiler.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/what-are-macros"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Locks vs Concurrency Primitives</title>
                  <guid isPermalink="false">http://www.lispcast.com/locks-v-concurrency-primitives</guid>
                  <link>http://www.lispcast.com/locks-v-concurrency-primitives</link>
                  <pubDate>Mon 29 Feb 2016 05:23:08 PM CST</pubDate>
                  <description>
                    Many people have asked me why Clojure has concurrency primitives. Aren't locks good enough? A humorous metaphor is elaborated.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/locks-v-concurrency-primitives"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>All about clojure.set</title>
                  <guid isPermalink="false">http://www.lispcast.com/clojure-set</guid>
                  <link>http://www.lispcast.com/clojure-set</link>
                  <pubDate>Sun 29 Feb 2016 4:00:54 AM CST</pubDate>
                  <description>
                    clojure.set is part of the standard library that comes with Clojure. It has functions for doing set operations and relational algebra.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clojure-set"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>What is Clojure?</title>
                  <guid isPermalink="false">http://www.lispcast.com/what-is-clojure</guid>
                  <link>http://www.lispcast.com/what-is-clojure</link>
                  <pubDate>Sat 27 Feb 2016 10:19:45 AM CST</pubDate>
                  <description>
                    Clojure is a general purpose programming language designed for the fast-approaching future.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/what-is-clojure"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>

	</channel>
</rss>
