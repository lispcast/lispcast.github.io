<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0">
	<channel>
		<title>LispCast</title>
		<link>http://www.lispcast.com/</link>
		<description>A blog about the simple joys of functional programming.</description>
		<language>en</language>


                <item>
                  <title>Won't it be hard to debug ClojureScript in my browser?</title>
                  <guid isPermalink="false">http://www.lispcast.com/debugging-clojurescript</guid>
                  <link>http://www.lispcast.com/debugging-clojurescript</link>
                  <pubDate>Sat 12 Sep 2015 03:03:13 PM CDT</pubDate>
                  <description>
                    Even though ClojureScript adds another layer of abstraction, the tooling makes it easier to debug that plain JavaScript.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/debugging-clojurescript"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>What is ClojureScript?</title>
                  <guid isPermalink="false">http://www.lispcast.com/what-is-clojurescript</guid>
                  <link>http://www.lispcast.com/what-is-clojurescript</link>
                  <pubDate>Fri 11 Sep 2015 01:07:15 PM CDT</pubDate>
                  <description>
                    ClojureScript is Clojure that compiles to JavaScript. It combines the power of Clojure with the reach of JavaScript.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/what-is-clojurescript"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>The Most Important Idea in Computer Science</title>
                  <guid isPermalink="false">http://www.lispcast.com/the-most-important-idea-in-computer-science</guid>
                  <link>http://www.lispcast.com/the-most-important-idea-in-computer-science</link>
                  <pubDate>Fri 28 Aug 2015 01:22:35 AM CDT</pubDate>
                  <description>
                    Computer Science has ideas that are important to the broader world. The most important is the Universal Turing Machine. From one perspective, Lisp embodies the idea at its core. To really understand how, I ask you to implement your own Lisp interpreter.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/the-most-important-idea-in-computer-science"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Let's TDD clojure.core/reduce</title>
                  <guid isPermalink="false">http://www.lispcast.com/lets-tdd-clojure-core-reduce</guid>
                  <link>http://www.lispcast.com/lets-tdd-clojure-core-reduce</link>
                  <pubDate>Mon 17 Aug 2015 09:53:32 PM CDT</pubDate>
                  <description>
                    `clojure.core/reduce` is a powerful function, yet the code for it is so simple. It's four lines! We TDD our own implementation.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/lets-tdd-clojure-core-reduce"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>A reduce Example Explained</title>
                  <guid isPermalink="false">http://www.lispcast.com/reduce-example-explained</guid>
                  <link>http://www.lispcast.com/reduce-example-explained</link>
                  <pubDate>Mon 10 Aug 2015 09:46:29 PM CDT</pubDate>
                  <description>
                    A deep-dive into a single reduce example shows how much can happen in a short bit of code.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/reduce-example-explained"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Let's TDD clojure.core/map</title>
                  <guid isPermalink="false">http://www.lispcast.com/tdd-clojure-core-map</guid>
                  <link>http://www.lispcast.com/tdd-clojure-core-map</link>
                  <pubDate>Tue 04 Aug 2015 11:27:58 PM CDT</pubDate>
                  <description>
                    Learning to write map is a good lesson because it has recursion, list building, and higher order functions. It's everything that makes Lisp great.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/tdd-clojure-core-map"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Annotated map</title>
                  <guid isPermalink="false">http://www.lispcast.com/annotated-map</guid>
                  <link>http://www.lispcast.com/annotated-map</link>
                  <pubDate>Wed 29 Jul 2015 09:33:06 PM CDT</pubDate>
                  <description>
                    map is one of the staples of functional programming. It's totally useful and also surprisingly simple. Let's look at some examples and annotated code.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/annotated-map"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Some Annotated clojure.core/reduce Examples</title>
                  <guid isPermalink="false">http://www.lispcast.com/annotated-clojure-core-reduce</guid>
                  <link>http://www.lispcast.com/annotated-clojure-core-reduce</link>
                  <pubDate>Tue 21 Jul 2015 10:40:39 PM CDT</pubDate>
                  <description>
                    reduce is a very useful function. You can use it for many calculations over a collection. Code annotations are useful, as are physical metaphors.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/annotated-clojure-core-reduce"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Reduce Complexity with Variants</title>
                  <guid isPermalink="false">http://www.lispcast.com/reduce-complexity-with-variants</guid>
                  <link>http://www.lispcast.com/reduce-complexity-with-variants</link>
                  <pubDate>Wed 08 Jul 2015 11:09:35 PM EDT</pubDate>
                  <description>
                    The structure of our data should match the relevant structures in the real world. And to ensure that our data is structured well, we should reduce the potential for incorrect structure. Variants provide a great solution for it.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/reduce-complexity-with-variants"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Avoid Naming at All Costs</title>
                  <guid isPermalink="false">http://www.lispcast.com/avoid-naming-at-all-costs</guid>
                  <link>http://www.lispcast.com/avoid-naming-at-all-costs</link>
                  <pubDate>Sun 05 Jul 2015 09:51:29 AM CDT</pubDate>
                  <description>
                    If naming is one of the two hardest things in programming, it follows that every other possible solution (except those few involving cache invalidation) should be attempted before naming something. As a corrolary, bad names are a code smell.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/avoid-naming-at-all-costs"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>

	</channel>
</rss>
