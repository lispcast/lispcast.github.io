<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0">
	<channel>
		<title>LispCast</title>
		<link>http://www.lispcast.com/</link>
		<description>A blog about the simple joys of functional programming.</description>
		<language>en</language>


                <item>
                  <title>Where to find time to learn and practice Clojure</title>
                  <guid isPermalink="false">http://www.lispcast.com/where-to-find-time-to-learn-clojure</guid>
                  <link>http://www.lispcast.com/where-to-find-time-to-learn-clojure</link>
                  <pubDate>Wed 04 Nov 2015 02:44:41 PM CST</pubDate>
                  <description>
                    Learning any new language is a challenge, and Clojure is no different. Finding the time to learn and practice is a real challenge, so we need to make the most of what time we have. These tips will help you immerse yourself in Clojure.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/where-to-find-time-to-learn-clojure"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Parens vs Brackets in Clojure</title>
                  <guid isPermalink="false">http://www.lispcast.com/parens-vs-brackets-in-clojure</guid>
                  <link>http://www.lispcast.com/parens-vs-brackets-in-clojure</link>
                  <pubDate>Mon 02 Nov 2015 10:05:06 PM CST</pubDate>
                  <description>
                    Clojure uses both parentheses and square brackets as part of its syntax. It might at first appear to be arbitrary, but it's actually systematic. What's more, it reveals one of the coolest things about Clojure: expressions define how they interpret their arguments.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/parens-vs-brackets-in-clojure"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>clj-refactor cheatsheets</title>
                  <guid isPermalink="false">http://www.lispcast.com/clj-refactor</guid>
                  <link>http://www.lispcast.com/clj-refactor</link>
                  <pubDate>Wed 28 Oct 2015 05:31:10 PM CDT</pubDate>
                  <description>
                    I've made some cheatsheets to help me learn clj-refactor, some Emacs software that helps you make systematic changes to code.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clj-refactor"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>How to Read Clojure Code Like an Expert</title>
                  <guid isPermalink="false">http://www.lispcast.com/how-to-read-code-like-a-clojure-expert</guid>
                  <link>http://www.lispcast.com/how-to-read-code-like-a-clojure-expert</link>
                  <pubDate>Wed 14 Oct 2015 08:47:09 PM CDT</pubDate>
                  <description>
                    As you get better with Clojure, it becomes easier to read. Why not jump ahead of the learning curve and read like an expert? Focus on the first thing, use the indentation, and read the evaluation order.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/how-to-read-code-like-a-clojure-expert"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Knowing this one ClojureScript gotcha will save you hours</title>
                  <guid isPermalink="false">http://www.lispcast.com/clojurescript-externs</guid>
                  <link>http://www.lispcast.com/clojurescript-externs</link>
                  <pubDate>Sat 20 Sep 2015 01:00:02 PM CDT</pubDate>
                  <description>
                    ClojureScript optimizes names by replacing them with shorter ones. Usually, that's a good thing. But it can get carried away. Externs are how you help it know what's unsafe to optimize.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clojurescript-externs"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>How can you test ClojureScript applications and libraries?</title>
                  <guid isPermalink="false">http://www.lispcast.com/testing-clojurescript</guid>
                  <link>http://www.lispcast.com/testing-clojurescript</link>
                  <pubDate>Fri 19 Sep 2015 01:41:04 PM CDT</pubDate>
                  <description>
                    Although it's still early, ClojureScript is rapidly maturing its testing story. There are a Leiningen plugin and a Boot task for autocompiling ClojureScript as it changes and running tests in a variety of engines.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/testing-clojurescript"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Will having ClojureScript, yet another asset type, slow down my deploys?</title>
                  <guid isPermalink="false">http://www.lispcast.com/clojurescript-build-times</guid>
                  <link>http://www.lispcast.com/clojurescript-build-times</link>
                  <pubDate>Wed 17 Sep 2015 1:14:49 PM CDT</pubDate>
                  <description>
                    ClojureScript builds can take a long time. But the extra time is worth it. It reduces the download size significantly.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/clojurescript-build-times"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Can building ClojureScript assets be integrated into my build process?</title>
                  <guid isPermalink="false">http://www.lispcast.com/building-clojurescript-process</guid>
                  <link>http://www.lispcast.com/building-clojurescript-process</link>
                  <pubDate>Wed 16 Sep 2015 03:52:12 PM CDT</pubDate>
                  <description>
                    ClojureScript's official build process is a simple shell command. There is also integration into Leiningen and Boot.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/building-clojurescript-process"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>Are there any DOM manipulation libraries in ClojureScript?</title>
                  <guid isPermalink="false">http://www.lispcast.com/cljs-dom-manipulation</guid>
                  <link>http://www.lispcast.com/cljs-dom-manipulation</link>
                  <pubDate>Tue 15 Sep 2015 01:04:20 PM CDT</pubDate>
                  <description>
                    ClojureScript has some nice DOM manipulation options, including jQuery and more idiomatic libraries.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/cljs-dom-manipulation"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>


                <item>
                  <title>What is React?</title>
                  <guid isPermalink="false">http://www.lispcast.com/what-is-react</guid>
                  <link>http://www.lispcast.com/what-is-react</link>
                  <pubDate>Sun 14 Sep 2015 01:00:45 PM CDT</pubDate>
                  <description>
                    React is a view library for web pages that makes DOM rendering in a functional style really easy. React makes web programming fun again.

                    &lt;p&gt;&lt;center&gt;&lt;a href="http://www.lispcast.com/what-is-react"&gt;Read full post&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

                  </description>
                </item>

	</channel>
</rss>
